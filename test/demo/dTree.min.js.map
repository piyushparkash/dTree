{"version":3,"sources":["dTree.min.js","dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","DEBUG_LEVEL","debug","centered","zoom","allNodes","_flatten","visibleNodes","_","filter","n","hidden","nodeSize","callbacks","nodeWidth","textRenderer","value","width","margin","left","right","height","top","bottom","d3","scaleExtent","on","console","log","event","transform","svg","attr","translate","select","append","tree","nodeHeightSeperation","separation","a","b","data","_update","source","_this","treenodes","links","selectAll","enter","l","noParent","styles","linage","_elbow","nodes","descendants","_linkSiblings","marriage","bind","_siblingLine","d","Math","round","x","cWidth","y","cHeight","id","html","nodeRenderer","name","extra","textClass","undefined","zoomLevel","gElement","transition","duration","ease","easeCubicOut","scale","preventDefault","nodeRightClick","recurse","node","children","forEach","push","ny","linedata","fun","line","curve","curveStepAfter","start","v","end","marriageId","marriageNode","find","nodeHeight","number","nodeMaxHeight","maxHeight","tmpSvg","document","createElement","body","appendChild","map","container","setAttribute","style","visibility","maxWidth","text","innerHTML","offsetHeight","removeChild","max","nodeClass","msg","VERSION","init","options","arguments","defaultsDeep","nodeClick","_nodeHeightSeperation","_nodeRenderer","_nodeSize","nodeSorter","aName","aExtra","bName","bExtra","_textRenderer","_preprocess","treeBuilder","create","reconstructTree","person","parent","class","depthOffset","pushNode","_sortPersons","child","_sortMarriages","marriages","index","m","sp","spouse","hierarchy","persons","sort","Array","isArray","marriageA","marriageB"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n      this.centered = null;\n      this.zoom = null;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function (n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes, opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        var firstTime = true;\n\n        this.zoom = d3.zoom().scaleExtent([0.1, 10]).on('zoom', function () {\n          console.log('This motherfucker was called', d3.event.transform);\n          svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\n          // firstTime = false\n          // svg.attr('transform', d3.event.transform);\n          // svg.call(this.zoom.scaleTo, d3.event.transform.k + .5)\n        });\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', width).attr('height', height)\n        // .call(this.zoom)\n        .append('g');\n        // .call(this.zoom.translateTo, width / 2, opts.margin.top)\n        // .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n        // d3.select('g').call(this.zoom.translateTo,opts.margin.top, (width / 2));\n\n        // svg.call(this.zoom.translateTo, 0, 800)\n\n        // Compute the layout.\n        this.tree = d3.tree().nodeSize([nodeSize[0] * 2, opts.callbacks.nodeHeightSeperation(nodeSize[0], nodeSize[1])]);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.data.hidden || b.data.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n        var _this = this;\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var treenodes = this.tree(source);\n        var links = treenodes.links();\n\n        // Create the link lines.\n        this.svg.selectAll('.link').data(links).enter()\n        // filter links with no parents to prevent empty nodes\n        .filter(function (l) {\n          return !l.target.data.noParent;\n        }).append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.svg.selectAll('.node').data(treenodes.descendants()).enter();\n\n        this._linkSiblings();\n\n        // Draw siblings (marriage)\n        this.svg.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', opts.styles.marriage).attr('d', _.bind(this._siblingLine, this));\n\n        // Create the node rectangles.\n        nodes.append('foreignObject').filter(function (d) {\n          return d.data.hidden ? false : true;\n        }).attr('x', function (d) {\n          return Math.round(d.x - d.cWidth / 2) + 'px';\n        }).attr('y', function (d) {\n          return Math.round(d.y - d.cHeight / 2) + 'px';\n        }).attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        }).attr('id', function (d) {\n          return d.id;\n        }).html(function (d) {\n          return opts.callbacks.nodeRenderer(d.data.name, d.x, d.y, nodeSize[0], nodeSize[1], d.data.extra, d.data.id, d.data['class'], d.data.textClass, opts.callbacks.textRenderer);\n        }).on('click', function (d) {\n          if (d.data.hidden) {\n            return;\n          }\n          debugger;\n\n          //Need to zoom and center when zoomed\n          var x = undefined,\n              y = undefined,\n              zoomLevel = undefined;\n\n          if (d && _this.centered !== d) {\n            debugger;\n            x = d.x;\n            y = d.y;\n\n            zoomLevel = 2;\n            _this.centered = d;\n          } else {\n            x = _this.opts.width / 2;\n            y = _this.opts.height / 2;\n            zoomLevel = 1;\n            _this.centered = null;\n          }\n\n          var gElement = d3.select('svg').select('g');\n          var currentTransform = gElement.attr('transform');\n          debugger;\n\n          d3.select('svg').select('g').transition().duration(1000).ease(d3.easeCubicOut)\n          // .attr('transform', `translate(${(this.opts.width - x)  / 2}, ${(this.opts.height - y) / 2})scale(${zoomLevel})`)\n          .attr('transform', d3.event.transform.translate((_this.opts.width - x) / 2, (_this.opts.height - y) / 2)).scale(zoomLevel);\n          // .call(this.zoom.translateTo, (this.opts.width - x) / 2, (this.opts.height - y) / 2)\n          // .call(this.zoom.scaleTo, zoomLevel)\n\n          // opts.callbacks.nodeClick(d.data.name, d.data.extra, d.data.id);\n        }).on('contextmenu', function (d) {\n          if (d.data.hidden) {\n            return;\n          }\n          d3.event.preventDefault();\n          opts.callbacks.nodeRightClick(d.data.name, d.data.extra, d.data.id);\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.data.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = Math.round(d.target.y + (d.source.y - d.target.y) * 0.50);\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.data.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.data.id;\n          });\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n\n          var marriageId = start[0].data.marriageNode != null ? start[0].data.marriageNode.id : end[0].data.marriageNode.id;\n          var marriageNode = allNodes.find(function (n) {\n            return n.data.id == marriageId;\n          });\n          d.source.marriageNode = marriageNode;\n          d.target.marriageNode = marriageNode;\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = Math.round(d.target.y + (d.source.y - d.target.y) * 0.50);\n        var nodeWidth = this.nodeSize[0];\n        var nodeHeight = this.nodeSize[1];\n\n        // Not first marriage\n        if (d.number > 0) {\n          ny -= Math.round(nodeHeight * 8 / 10);\n        }\n\n        var linedata = [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: Math.round(d.source.x + nodeWidth * 6 / 10),\n          y: d.source.y\n        }, {\n          x: Math.round(d.source.x + nodeWidth * 6 / 10),\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }], [{\n      key: '_nodeHeightSeperation',\n      value: function _nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\n        return nodeMaxHeight + 25;\n      }\n    }, {\n      key: '_nodeSize',\n      value: function _nodeSize(nodes, width, textRenderer) {\n        var maxWidth = 0;\n        var maxHeight = 0;\n        var tmpSvg = document.createElement('svg');\n        document.body.appendChild(tmpSvg);\n\n        _.map(nodes, function (n) {\n          var container = document.createElement('div');\n          container.setAttribute('class', n.data['class']);\n          container.style.visibility = 'hidden';\n          container.style.maxWidth = width + 'px';\n\n          var text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\n          container.innerHTML = text;\n\n          tmpSvg.appendChild(container);\n          var height = container.offsetHeight;\n          tmpSvg.removeChild(container);\n\n          maxHeight = Math.max(maxHeight, height);\n          n.cHeight = height;\n          if (n.data.hidden) {\n            n.cWidth = 0;\n          } else {\n            n.cWidth = width;\n          }\n        });\n        document.body.removeChild(tmpSvg);\n\n        return [width, maxHeight];\n      }\n    }, {\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n        var node = '';\n        node += '<div ';\n        node += 'style=\"height:100%;width:100%;\" ';\n        node += 'class=\"' + nodeClass + '\" ';\n        node += 'id=\"node' + id + '\">\\n';\n        node += textRenderer(name, extra, textClass);\n        node += '</div>';\n        return node;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, extra, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n        return node;\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.DEBUG_LEVEL > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    VERSION: '2.2.2',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeRightClick: function nodeRightClick(name, extra, id) {},\n          nodeHeightSeperation: function nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\n            return TreeBuilder._nodeHeightSeperation(nodeWidth, nodeMaxHeight);\n          },\n          nodeRenderer: function nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function nodeSize(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function nodeSorter(aName, aExtra, bName, bExtra) {\n            return 0;\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n    },\n\n    _preprocess: function _preprocess(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          'class': person['class'] ? person['class'] : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function (child) {\n          reconstructTree(child, node);\n        });\n\n        parent.children.push(node);\n\n        //sort marriages\n        dTree._sortMarriages(person.marriages, opts);\n\n        // go through marriage\n        _.forEach(person.marriages, function (marriage, index) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: marriage.extra\n          };\n\n          var sp = marriage.spouse;\n\n          var spouse = {\n            name: sp.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: sp.textClass ? sp.textClass : opts.styles.text,\n            'class': sp['class'] ? sp['class'] : opts.styles.node,\n            extra: sp.extra,\n            marriageNode: m\n          };\n\n          parent.children.push(m, spouse);\n\n          dTree._sortPersons(marriage.children, opts);\n          _.forEach(marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            },\n            number: index\n          });\n        });\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: d3.hierarchy(root),\n        siblings: siblings\n      };\n    },\n\n    _sortPersons: function _sortPersons(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function (a, b) {\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    },\n\n    _sortMarriages: function _sortMarriages(marriages, opts) {\n      if (marriages != undefined && Array.isArray(marriages)) {\n        marriages.sort(function (marriageA, marriageB) {\n          var a = marriageA.spouse;\n          var b = marriageB.spouse;\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return marriages;\n    }\n\n  };\n\n  return dTree;\n});\n\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.dTree = factory());\n}(this, (function () { 'use strict';\n\nclass TreeBuilder {\n\n  constructor(root, siblings, opts) {\n    TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n    this.root = root;\n    this.siblings = siblings;\n    this.opts = opts;\n    this.centered = null;\n    this.zoom = null;\n\n    // flatten nodes\n    this.allNodes = this._flatten(this.root);\n\n    // Calculate node size\n    let visibleNodes = _.filter(this.allNodes, function(n) {\n      return !n.hidden;\n    });\n    this.nodeSize = opts.callbacks.nodeSize(visibleNodes,\n      opts.nodeWidth, opts.callbacks.textRenderer);\n  }\n\n  create() {\n\n    let opts = this.opts;\n    let allNodes = this.allNodes;\n    let nodeSize = this.nodeSize;\n\n    let width = opts.width + opts.margin.left + opts.margin.right;\n    let height = opts.height + opts.margin.top + opts.margin.bottom;\n\n    let firstTime = true;\n\n    this.zoom = d3.zoom()\n      .scaleExtent([0.1, 10])\n      .on('zoom', function() {\n        console.log('This motherfucker was called',d3.event.transform);\n        svg.attr('transform', d3.event.transform.translate(width / 2, opts.margin.top));\n        // firstTime = false\n        // svg.attr('transform', d3.event.transform);\n        // svg.call(this.zoom.scaleTo, d3.event.transform.k + .5)\n      });\n\n    //make an SVG\n    let svg = this.svg = d3.select(opts.target)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n      // .call(this.zoom)\n      .append('g');\n      // .call(this.zoom.translateTo, width / 2, opts.margin.top)\n      // .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n    // d3.select('g').call(this.zoom.translateTo,opts.margin.top, (width / 2));\n\n    // svg.call(this.zoom.translateTo, 0, 800)\n\n    // Compute the layout.\n    this.tree = d3.tree()\n      .nodeSize([nodeSize[0] * 2,\n                 opts.callbacks.nodeHeightSeperation(nodeSize[0], nodeSize[1])]);\n\n    this.tree.separation(function separation(a, b) {\n      if (a.data.hidden || b.data.hidden) {\n        return 0.3;\n      } else {\n        return 0.6;\n      }\n    });\n\n    this._update(this.root);\n\n  }\n\n  _update(source) {\n\n    let opts = this.opts;\n    let allNodes = this.allNodes;\n    let nodeSize = this.nodeSize;\n\n    let treenodes = this.tree(source);\n    let links = treenodes.links();\n\n    // Create the link lines.\n    this.svg.selectAll('.link')\n      .data(links)\n      .enter()\n      // filter links with no parents to prevent empty nodes\n      .filter(function(l) {\n        return !l.target.data.noParent;\n      })\n      .append('path')\n      .attr('class', opts.styles.linage)\n      .attr('d', this._elbow);\n\n    let nodes = this.svg.selectAll('.node')\n      .data(treenodes.descendants())\n      .enter();\n\n    this._linkSiblings();\n\n    // Draw siblings (marriage)\n    this.svg.selectAll('.sibling')\n      .data(this.siblings)\n      .enter()\n      .append('path')\n      .attr('class', opts.styles.marriage)\n      .attr('d', _.bind(this._siblingLine, this));\n\n    // Create the node rectangles.\n    nodes.append('foreignObject')\n      .filter(function(d) {\n        return d.data.hidden ? false : true;\n      })\n      .attr('x', function(d) {\n        return Math.round(d.x - d.cWidth / 2) + 'px';\n      })\n      .attr('y', function(d) {\n        return Math.round(d.y - d.cHeight / 2) + 'px';\n      })\n      .attr('width', function(d) {\n        return d.cWidth + 'px';\n      })\n      .attr('height', function(d) {\n        return d.cHeight + 'px';\n      })\n      .attr('id', function(d) {\n        return d.id;\n      })\n      .html((d) => {\n        return opts.callbacks.nodeRenderer(\n          d.data.name,\n          d.x,\n          d.y,\n          nodeSize[0],\n          nodeSize[1],\n          d.data.extra,\n          d.data.id,\n          d.data.class,\n          d.data.textClass,\n          opts.callbacks.textRenderer);\n      })\n      .on('click', (d) => {\n        if (d.data.hidden) {\n          return;\n        }\n        debugger\n\n        //Need to zoom and center when zoomed\n        let x, y ,zoomLevel;\n\n        if (d && this.centered !== d) {\n          debugger\n          x = d.x;\n          y = d.y;\n\n          zoomLevel = 2;\n          this.centered = d;\n        } else {\n          x = this.opts.width / 2;\n          y = this.opts.height / 2;\n          zoomLevel = 1;\n          this.centered = null; \n        }\n\n        let gElement = d3.select('svg').select('g');\n        let currentTransform = gElement.attr('transform');\n        debugger \n\n        d3.select('svg').select('g').transition()\n          .duration(1000)\n          .ease(d3.easeCubicOut)\n          // .attr('transform', `translate(${(this.opts.width - x)  / 2}, ${(this.opts.height - y) / 2})scale(${zoomLevel})`)\n          .attr('transform', d3.event.transform.translate((this.opts.width - x) / 2, (this.opts.height - y) / 2)).scale(zoomLevel);\n          // .call(this.zoom.translateTo, (this.opts.width - x) / 2, (this.opts.height - y) / 2)\n          // .call(this.zoom.scaleTo, zoomLevel)\n\n        // opts.callbacks.nodeClick(d.data.name, d.data.extra, d.data.id);\n      })\n      .on('contextmenu', function(d)  {\n        if (d.data.hidden) {\n          return;\n        }\n        d3.event.preventDefault();\n        opts.callbacks.nodeRightClick(d.data.name, d.data.extra, d.data.id);\n      });\n  }\n\n  _flatten(root) {\n    let n = [];\n    let i = 0;\n\n    function recurse(node) {\n      if (node.children) {\n        node.children.forEach(recurse);\n      }\n      if (!node.id) {\n        node.id = ++i;\n      }\n      n.push(node);\n    }\n    recurse(root);\n    return n;\n  }\n\n  _elbow(d, i) {\n    if (d.target.data.noParent) {\n      return 'M0,0L0,0';\n    }\n    let ny = Math.round(d.target.y + (d.source.y - d.target.y) * 0.50);\n\n    let linedata = [{\n      x: d.target.x,\n      y: d.target.y\n    }, {\n      x: d.target.x,\n      y: ny\n    }, {\n      x: d.source.x,\n      y: d.source.y\n    }];\n\n    let fun = d3.line().curve(d3.curveStepAfter)\n      .x(function(d) {\n        return d.x;\n      })\n      .y(function(d) {\n        return d.y;\n      });\n    return fun(linedata);\n  }\n\n  _linkSiblings() {\n\n    let allNodes = this.allNodes;\n\n    _.forEach(this.siblings, function(d) {\n      let start = allNodes.filter(function(v) {\n        return d.source.id == v.data.id;\n      });\n      let end = allNodes.filter(function(v) {\n        return d.target.id == v.data.id;\n      });\n      d.source.x = start[0].x;\n      d.source.y = start[0].y;\n      d.target.x = end[0].x;\n      d.target.y = end[0].y;\n\n      let marriageId = (start[0].data.marriageNode != null ?\n                        start[0].data.marriageNode.id :\n                        end[0].data.marriageNode.id);\n      let marriageNode = allNodes.find(function(n) {\n        return n.data.id == marriageId;\n      });\n      d.source.marriageNode = marriageNode;\n      d.target.marriageNode = marriageNode;\n    });\n\n  }\n\n  _siblingLine(d, i) {\n\n    let ny = Math.round(d.target.y + (d.source.y - d.target.y) * 0.50);\n    let nodeWidth = this.nodeSize[0];\n    let nodeHeight = this.nodeSize[1];\n\n    // Not first marriage\n    if (d.number > 0) {\n      ny -= Math.round(nodeHeight * 8 / 10);\n    }\n\n    let linedata = [{\n      x: d.source.x,\n      y: d.source.y\n    }, {\n      x: Math.round(d.source.x + nodeWidth * 6 / 10),\n      y: d.source.y\n    }, {\n      x: Math.round(d.source.x + nodeWidth * 6 / 10),\n      y: ny\n    }, {\n      x: d.target.marriageNode.x,\n      y: ny\n    }, {\n      x: d.target.marriageNode.x,\n      y: d.target.y\n    }, {\n      x: d.target.x,\n      y: d.target.y\n    }];\n\n    let fun = d3.line().curve(d3.curveStepAfter)\n      .x(function(d) {\n        return d.x;\n      })\n      .y(function(d) {\n        return d.y;\n      });\n    return fun(linedata);\n  }\n\n  static _nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\n    return nodeMaxHeight + 25;\n  }\n\n  static _nodeSize(nodes, width, textRenderer) {\n    let maxWidth = 0;\n    let maxHeight = 0;\n    let tmpSvg = document.createElement('svg');\n    document.body.appendChild(tmpSvg);\n\n    _.map(nodes, function(n) {\n      let container = document.createElement('div');\n      container.setAttribute('class', n.data.class);\n      container.style.visibility = 'hidden';\n      container.style.maxWidth = width + 'px';\n\n      let text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\n      container.innerHTML = text;\n\n      tmpSvg.appendChild(container);\n      let height = container.offsetHeight;\n      tmpSvg.removeChild(container);\n\n      maxHeight = Math.max(maxHeight, height);\n      n.cHeight = height;\n      if (n.data.hidden) {\n        n.cWidth = 0;\n      } else {\n        n.cWidth = width;\n      }\n    });\n    document.body.removeChild(tmpSvg);\n\n    return [width, maxHeight];\n  }\n\n  static _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n    let node = '';\n    node += '<div ';\n    node += 'style=\"height:100%;width:100%;\" ';\n    node += 'class=\"' + nodeClass + '\" ';\n    node += 'id=\"node' + id + '\">\\n';\n    node += textRenderer(name, extra, textClass);\n    node += '</div>';\n    return node;\n  }\n\n  static _textRenderer(name, extra, textClass) {\n    let node = '';\n    node += '<p ';\n    node += 'align=\"center\" ';\n    node += 'class=\"' + textClass + '\">\\n';\n    node += name;\n    node += '</p>\\n';\n    return node;\n  }\n\n  static _debug(msg) {\n    if (TreeBuilder.DEBUG_LEVEL > 0)  {\n      console.log(msg);\n    }\n  }\n\n}\n\nconst dTree = {\n\n  VERSION: '2.2.2',\n\n  init: function(data, options = {}) {\n\n    var opts = _.defaultsDeep(options || {}, {\n      target: '#graph',\n      debug: false,\n      width: 600,\n      height: 600,\n      callbacks: {\n        nodeClick: function(name, extra, id) {},\n        nodeRightClick: function(name, extra, id) {},\n        nodeHeightSeperation: function(nodeWidth, nodeMaxHeight) {\n          return TreeBuilder._nodeHeightSeperation(nodeWidth, nodeMaxHeight);\n        },\n        nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n          return TreeBuilder._nodeRenderer(name, x, y, height, width, extra,\n            id,nodeClass, textClass, textRenderer);\n        },\n        nodeSize: function(nodes, width, textRenderer) {\n          return TreeBuilder._nodeSize(nodes, width, textRenderer);\n        },\n        nodeSorter: function(aName, aExtra, bName, bExtra) {return 0;},\n        textRenderer: function(name, extra, textClass) {\n          return TreeBuilder._textRenderer(name, extra, textClass);\n        },\n      },\n      margin: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      nodeWidth: 100,\n      styles: {\n        node: 'node',\n        linage: 'linage',\n        marriage: 'marriage',\n        text: 'nodeText'\n      }\n    });\n\n    var data = this._preprocess(data, opts);\n    var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n    treeBuilder.create();\n\n  },\n\n  _preprocess: function(data, opts) {\n\n    var siblings = [];\n    var id = 0;\n\n    var root = {\n      name: '',\n      id: id++,\n      hidden: true,\n      children: []\n    };\n\n    var reconstructTree = function(person, parent) {\n\n      // convert to person to d3 node\n      var node = {\n        name: person.name,\n        id: id++,\n        hidden: false,\n        children: [],\n        extra: person.extra,\n        textClass: person.textClass ? person.textClass : opts.styles.text,\n        class: person.class ? person.class : opts.styles.node\n      };\n\n      // hide linages to the hidden root node\n      if (parent == root) {\n        node.noParent = true;\n      }\n\n      // apply depth offset\n      for (var i = 0; i < person.depthOffset; i++) {\n        var pushNode = {\n          name: '',\n          id: id++,\n          hidden: true,\n          children: [],\n          noParent: node.noParent\n        };\n        parent.children.push(pushNode);\n        parent = pushNode;\n      }\n\n      // sort children\n      dTree._sortPersons(person.children, opts);\n\n      // add \"direct\" children\n      _.forEach(person.children, function(child) {\n        reconstructTree(child, node);\n      });\n\n      parent.children.push(node);\n\n      //sort marriages\n      dTree._sortMarriages(person.marriages, opts);\n\n      // go through marriage\n      _.forEach(person.marriages, function(marriage, index) {\n\n        var m = {\n          name: '',\n          id: id++,\n          hidden: true,\n          noParent: true,\n          children: [],\n          extra: marriage.extra\n        };\n\n        var sp = marriage.spouse;\n\n        var spouse = {\n          name: sp.name,\n          id: id++,\n          hidden: false,\n          noParent: true,\n          children: [],\n          textClass: sp.textClass ? sp.textClass : opts.styles.text,\n          class: sp.class ? sp.class : opts.styles.node,\n          extra: sp.extra,\n          marriageNode: m\n        };\n\n        parent.children.push(m, spouse);\n\n        dTree._sortPersons(marriage.children, opts);\n        _.forEach(marriage.children, function(child) {\n          reconstructTree(child, m);\n        });\n\n        siblings.push({\n          source: {\n            id: node.id\n          },\n          target: {\n            id: spouse.id\n          },\n          number: index\n        });\n      });\n\n    };\n\n    _.forEach(data, function(person) {\n      reconstructTree(person, root);\n    });\n\n    return {\n      root: d3.hierarchy(root),\n      siblings: siblings\n    };\n\n  },\n\n  _sortPersons: function(persons, opts) {\n    if (persons != undefined) {\n      persons.sort(function(a, b) {\n        return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n      });\n    }\n    return persons;\n  },\n\n  _sortMarriages: function(marriages, opts) {\n    if (marriages != undefined && Array.isArray(marriages)) {\n      marriages.sort(function(marriageA, marriageB) {\n        var a = marriageA.spouse;\n        var b = marriageB.spouse;\n        return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n      });\n    }\n    return marriages;\n  }\n\n};\n\nreturn dTree;\n\n})));\n"]}